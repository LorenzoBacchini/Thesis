/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package artificial_vision_tracking;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacv.FrameGrabber;
import org.bytedeco.opencv.opencv_java;
import org.opencv.objdetect.Dictionary;
import org.opencv.objdetect.Objdetect;
import org.opencv.core.Mat;

import java.util.List;
import java.util.ArrayList;


public class App {
    /*static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }*/
    static {
        // Carica le librerie native di OpenCV
        Loader.load(opencv_java.class);
    }
    public static void main(String[] args) throws FrameGrabber.Exception, InterruptedException {
        final int markersX = 11; // Numero di marker sull'asse X
        final int markersY = 8; // Numero di marker sull'asse Y
        final float markerLength = 0.03f; // Lunghezza del marker (in metri)
        //final float markerSeparation = 0.007f; // Distanza tra i marker (in metri)
        final Dictionary dictionary = Objdetect.getPredefinedDictionary(Objdetect.DICT_4X4_100);
        final int selectedCamera = 1;

        //GenerateMarkersSheet gms = new GenerateMarkersSheet();
        //gms.generateMarkersSheet();
        List<Mat> cameraParam = CameraCalibrator.calibration(markersX, markersY);
        
        
        /*
        List<Mat> cameraParam = new ArrayList<>();
        Mat cameraMatrix = new Mat();
        Mat distCoeffs = new Mat();

        cameraMatrix = new Mat(3, 3, org.opencv.core.CvType.CV_64F);
        double[] data = {
            1339.572282371255, 0, 942.2153746376233,
            0, 1337.74718206229, 581.1480012090642,
            0, 0, 1
        };
        cameraMatrix.put(0, 0, data);

        distCoeffs = new Mat(1, 5, org.opencv.core.CvType.CV_64F);
        double[] data2 = {
            -0.3857984048205869,
            0.06915335453979676,
            -0.0002579661191431792,
            -0.0004055500912263875,
            0.1276107988945717
        };

        distCoeffs.put(0, 0, data2);

        cameraParam.add(cameraMatrix);
        cameraParam.add(distCoeffs);
        */
        

        CameraPose.calcPose(cameraParam.get(0), cameraParam.get(1), markerLength, dictionary, selectedCamera);
        //MarkersDetector md = new MarkersDetector();
        //md.detect(dictionary, selectedCamera);
        //QrDetector qrDetector = new QrDetector();
        //qrDetector.detect();
    
    }
}