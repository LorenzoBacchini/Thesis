27/06/24
Inizio i lavori per la tesi di laurea triennale di Ingegneria e scienze informatiche
- creazione della repo
- consultazione esperienze e esempi di tesi triennali
- inizio studio dei concetti di visione artificiale applicati alla jvm 
- creazione progetto di test per la visione artificiale
- scoperta degli ArUco markers
- creazione applicazione java base che visualizza ciò che la webcam vede

fonti:
https://www.youtube.com/watch?v=iReJXUeLb20
https://docs.opencv.org/4.x/d5/dae/tutorial_aruco_detection.html
https://github.com/bytedeco/javacv

28/06/24
continuo sviluppo applicazione di test
- studio libreria specifica di visione artificiale per java Boofcv

29/06/24
continuo sviluppo applicazione di test
- test su opencv
- sviluppo prima app che riconosce qr code
- sviluppo prima app che riconosce aruco markers (non testata)

01/07/24
- test applicazione sviluppata in data 29/06 e successivi miglioramenti
- utilizzo di marker aruco stampati, dimensioni 4x4(50, 100, 250, 1000)
- studio pagina "Detection of aruco markers" di opencv
- studio concetto di posa della camera
- inizio calibrazione camera con aruco board

fonti:
https://chev.me/arucogen/
https://docs.opencv.org/4.x/da/d13/tutorial_aruco_calibration.html

02/07/24
- continuo calibrazione e posa camera
- download librerie opencv
- ho inserito le librerie di opencv all'interno della cartella bin del jdk
- tutto questo per poter utilizzare una classe completa per la calibrazione trovata su gituhub
- divisione funzioni in più classi
- pubblicazione prima release su github e modifica repo pubblica

fonti:
https://sourceforge.net/projects/opencvlibrary/files/4.5.3/

06/07/24
- continuo calibrazione e posa camera
- tentativo sostituzione libreria opencv453 con opencv9
- importazione nuova libreria per utilizzare versione differente di opencv
- grazie a chatgpt ho scoperto 
    
    static {
        // Carica le librerie native di OpenCV
        Loader.load(opencv_java.class);
    }

    con la quale sono riuscito a caricare senza problemi le librerie opencv

- mi sono bloccato sulla funzione calibrateCamera che non riesce a ottenere un'immagine

fonti:
https://www.baeldung.com/java-opencv

08/07/24
- continuo calibrazione e posa camera
- finito di implementare la calibrazione della camera
- inizio sviluppo posa camera

09/07/24
- continuo calibrazione e posa
- sono riuscito a sviluppare un primo sistema di posa ma non funziona benissimo

fonti: https://docs.opencv.org/4.x/d5/dae/tutorial_aruco_detection.html

10/07/24
- sto cercando di capire perchè la posa della camera non disegna
    gli assi in maniera corretta
- ho provato a calibrare la camera per più tempo ma non cambia niente
    allora sto provando a calibrarla con più di 4 marker e quindi 
    ho creato una classe con una funzione per generare pagine di marker
- non ho ottenuto alcun risultato modificando tempi e numero di marker,
    credo proprio ci sia un problema di calibrazione e posa

11/07/24
- ho stampato delle tavole di marker aruco per fare dei test
    e cercare di capire perche non funziona la posa e/o la calibrazione

12/07/24
- cerco di capire bene se i parametri della webcam vengono ottenuti correttamente
    e se rispecchiano quelli reali
- sono riuscito a sviluppare un programma python capace di calibrare la camera
- ora cerco di aggiustare la posa per far funzionare tutto il sistema nel suo insieme
- sono riuscito a far andare la posa e la calibrazione assieme, il problema è
    che la calibrazione al momento va solo grazie al codice python, mentre la
    posa funziona solo attraverso funzioni deprecate, con le funzioni odierne 
    non riesco a farlo funzionare

fonti: https://www.geeksforgeeks.org/camera-calibration-with-python-opencv/

13/07/24
- sto cercando di capire meglio il funzionamento dei metodi per la posa, 
    così da cercare di utilizzare solo metodi attuali e non quelli deprecati
- sono riuscito a sviluppare una classe per la posa della camera funzionante
- non sono ancora riuscito a creare un metodo in java per poter calibrare la camera
    correttamente, al momento però ho impostato che la calibrazione camera prende 
    input dallo storage
- momentaneamente nella classe App sono presenti due parametri hardcoded per poter
    utilizzare i valori della camera restituiti dall'applicazione in python

18/07/24
- inizio calcolo precisione della rilevazione e velocità della rilevazione
- sto cercando di capire perchè la variabile markerLength che indica la lunghezza
    dei marker influenzi di poco la posa anche se sballata di molto
- sto cercando di capire perchè i marker appaiono alla distanza sbagliata

19/07/24
- test con python per capire se i problemi sono causati dal codice java o se
    in generale le funzioni opencv garantiscono poca precisione

20/07/24
- le prove con python stanno dando alcuni problemi, ora sto cercando di capire
    perchè la distanza della camera dal marker viene calcolata male
- in teoria calibrazione e posa in python sono corrette ed infatti anche l'errore
    di riproiezione e molto basso, adesso provo a convertire in java
- sono riuscito a riportare le modifiche anche su java di conseguenza ora e possibile
    vedere il tempo medio di elaborazione per frame e l'errore di riproiezione medio
- continuo ad avere problemi con la stima della distanza che in base alla dimensione del 
    marker e sempre doppia rispetto al valore che ci si aspetterebbe

fonti: 
https://docs.opencv.org/4.x/d5/d1f/calib3d_solvePnP.html
https://docs.opencv.org/4.10.0/d9/d0c/group__calib3d.html#ga549c2075fac14829ff4a58bc931c033d
https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html